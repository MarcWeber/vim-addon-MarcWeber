snippet absoluteCoordinates
	[% set paste %]
	function getAbsoluteLeft(objectId) {
		// Get an object left position from the upper left viewport corner
		o = document.getElementById(objectId)
		oLeft = o.offsetLeft            // Get left position from the parent object
		while(o.offsetParent!=null) {   // Parse the parent hierarchy up to the document element
			oParent = o.offsetParent    // Get parent object reference
			oLeft += oParent.offsetLeft // Add parent left position
			o = oParent
		}
		return oLeft
	}
	
	function getAbsoluteTop(objectId) {
		// Get an object top position from the upper left viewport corner
		o = document.getElementById(objectId)
		oTop = o.offsetTop            // Get top position from the parent object
		while(o.offsetParent!=null) { // Parse the parent hierarchy up to the document element
			oParent = o.offsetParent  // Get parent object reference
			oTop += oParent.offsetTop // Add parent top position
			o = oParent
		}
		return oTop
	}
snippet benchmark
	var Benchmark = new Class({
	    initialize : function (){
	        this.sections = {};
	        this.start = this.getTick();
	    },
	    getTick : function(){
	        return new Date().getTime();
	    },
	    enterSection : function(s){
	        var n = {}; n[s] = [];
	        this.sections = $merge( n, this.sections );
	        t = this.getTick()
	        console.log(s + 'entering section at '+t);
	        this.sections[s].push(t);
	    },
	    leaveSection : function(s){
	        console.log(this.sections);
	        if (!this.sections[s])
	            console.log('verlasse nicht existierende Sektion '+s);
	        else {
	            var tick = this.getTick();
	            var t = this.sections[s].pop();
	            var diff = (tick - t)
	            console.log(s + 'left sect at '+tick);
	            console.log(s + 'time of sect [ms] :'+diff);
	            console.error(diff);
	        }
	    }
	});
	var b = new Benchmark();
	console.log('Benchmark object erstellt');
snippet dumpdom
	function dumpDOM(div, obj, indent){
	    var div = div 
	             || ($('dumpDOM') && $('dumpDOM').empty()) 
	             || new Element('div', { 'id' : 'dumpDOM'
	                                   , 'styles' :  { 'position' : 'float'
	                                            , 'left': '10px'
	                                            , 'top': '10px'
	                                            , 'margin-top': '20px'
	                                            }
	                                    })
	                        .injectInside($$('body')[0]);
	    var obj = obj || $$('html')[0];
	    var indent = indent || 0;
	    new Element('a')
	      .addEvent('click', function (){console.log('======================');
	                                     for (  var i in obj){ console.log([i, obj[i]]);};
	                                     console.log(obj.innerHTML);
	                                     } )
	      .injectInside(div)
	      .setText(obj.tagName+' '+Json.toString(obj.getCoordinates()) + obj.innerHTML.slice(0,200));
	
	    $each( obj.getChildren(), function (c){
	            if (c.id != 'dumpDOM'){
	                var d = new Element('div', { styles :{ 'padding-left': indent+'px', 'padding-bottom' : '0px', 'margin' : '0px'}})
	                            .injectInside(div);
	                //new Element('br').injectInside(div);
	                dumpDOM(d, c, 4+indent);
	            }
	            });
	}
snippet fold
	Array.extend({
	  // [ 3, 5, 9 ].foldl(function(el, value){ return value - el; } );
	  // == 3 - 5 - 9
	  // [ 3, 5, 9 ].foldl(function(el, value){ return value - el; } );
	  // == 3 - 5 - 9
	  foldl: function (f){
	    var i = this.length - 1;
	
	    if (arguments.length == 2){
	      var result = arguments[1];
	    } else {
	      var result = this[i];
	      i--;
	    }
	
	    for (; i >= 0 ; i--)
	      var result = f( result, this[i]);
	    return result;
	  },
	  foldr: function (f){
	    var i = 0;
	
	    if (arguments.length == 2){
	      var result = arguments[1];
	    } else {
	      var result = this[i];
	      i++;
	    }
	
	    var length = this.length;
	    for (; i < length; i++)
	      var result = f( this[i], result);
	    return result;
	  }
	}
	);
snippet utf8
	[% set paste %]
	function decode_utf8(utftext) {
	     var plaintext = ""; var i=0; var c=c1=c2=0;
	     // while-Schleife, weil einige Zeichen uebersprungen werden
	     while(i<utftext.length)
	         {
	         c = utftext.charCodeAt(i);
	         if (c<128) {
	             plaintext += String.fromCharCode(c);
	             i++;}
	         else if((c>191) && (c<224)) {
	             c2 = utftext.charCodeAt(i+1);
	             plaintext += String.fromCharCode(((c&31)<<6) | (c2&63));
	             i+=2;}
	         else {
	             c2 = utftext.charCodeAt(i+1); c3 = utftext.charCodeAt(i+2);
	             plaintext += String.fromCharCode(((c&15)<<12) | ((c2&63)<<6) | (c3&63));
	             i+=3;}
	         }
	     return plaintext;
	}
	
	function encode_utf8(rohtext) {
	     // dient der Normalisierung des Zeilenumbruchs
	     rohtext = rohtext.replace(/\r\n/g,"\n");
	     var utftext = "";
	     for(var n=0; n<rohtext.length; n++)
	         {
	         // ermitteln des Unicodes des  aktuellen Zeichens
	         var c=rohtext.charCodeAt(n);
	         // alle Zeichen von 0-127 => 1byte
	         if (c<128)
	             utftext += String.fromCharCode(c);
	         // alle Zeichen von 127 bis 2047 => 2byte
	         else if((c>127) && (c<2048)) {
	             utftext += String.fromCharCode((c>>6)|192);
	             utftext += String.fromCharCode((c&63)|128);}
	         // alle Zeichen von 2048 bis 66536 => 3byte
	         else {
	             utftext += String.fromCharCode((c>>12)|224);
	             utftext += String.fromCharCode(((c>>6)&63)|128);
	             utftext += String.fromCharCode((c&63)|128);}
	         }
	     return utftext;
	}
snippet console.log
	console.log(${1})
snippet moo_dom_ready
		window.addEvent("domready", function(){
			${1}
		});
snippet nE
	new Element('${1}', {${2}})
snippet sane_image_size_steps
       function my_size($isw, $ish, $rw, $rh){
               
               // same ratio as original image:
               if ($isw / $ish > $rw / $rh){
                       // request more portrait like
                       $rw = $rh * $isw  / $ish;
               } else {
                       // request more landscape like
                       $rh = $rw * $ish  / $isw;
               }
               
               $newArea = pow(2, ceil(log($rw * $rh, 2)));
               
               $r = $isw / $ish;
               $w = (int) (sqrt($newArea * $r));
               $h = (int) (sqrt($newArea) / sqrt($r));
               
               // don't return image which is larger than original:
               if ($isw < $w) $w = $isw;
               if ($ish < $h) $h = $ish;
               
               return array($w, $h);
               
       }

snippet jquery_domready
	$(document).ready(function(){
		$1
	});

snippet jquery_namespace
	(function( $ ) {
		// Your jQuery code here, using the $
	})( jQuery );

snippet type_shorcut
	type x  same as con x :: Type
	type y = T same as con X :: Type = T
snippet each
	each(function(${1}){
	})

snippet f
	function(){$1}

snippet toj
	JSON.stringify(${1})

snippet r
	require("${1}")

snippet rethinkdb_connect
	r = require("rethinkdb")
	r.connect( {host: 'localhost', port: 28015}, function(err, conn) {
		if (err) throw err;
		connection = conn;
	})
snippet cl
	console.log(${1});
snippet cla
	console.log(JSON.stringify(${1}, undefined, 4));

snippet trim
	replace(/^\s+|\s+$/g, '')


snippet distance_lat_lon
        function distance(lat1, lon1, lat2, lon2, unit) {
          var radlat1 = Math.PI * lat1/180
          var radlat2 = Math.PI * lat2/180
          var radlon1 = Math.PI * lon1/180
          var radlon2 = Math.PI * lon2/180
          var theta = lon1-lon2
          var radtheta = Math.PI * theta/180
          var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
          dist = Math.acos(dist)
          dist = dist * 180/Math.PI
          dist = dist * 60 * 1.1515
          if (unit=="K") { dist = dist * 1.609344 }
          if (unit=="N") { dist = dist * 0.8684 }
          return dist
        }

snippet detect_mouse_closing_movement

     var previous_event = undefined;
        var previous_events = [];
        $(window).mousemove(function(e){
          var ref = {x: $(window).width() - 10, y: - 20 };
          var el = {time : new Date(), x: e.clientX, y :e.clientY, dist:  Math.sqrt( Math.pow( e.clientX - ref.x, 2) + Math.pow(e.clientY - ref.y, 2)) }
          if (!previous_event
            || (    el.time.getTime() - previous_event.time.getTime() < 1000
            && el.dist < previous_event.dist
          )
          ) {
            previous_event = el;
            previous_events.push(el);
            if (el.dist < 200 && previous_events[0].dist > 300){
              show_quit_message()
            }
          } else {
            previous_events = [];
            previous_event = undefined;
          }
        });



        // scrolling on mobile

        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
              || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))){
        var previous_scroll_event = undefined;
        var previous_scroll_events = [];
        $(window).scroll(function(e){

          var el = {time : new Date(), scrollTop: document.body.scrollTop }
          if (!previous_scroll_event
            || (    el.time.getTime() - previous_scroll_event.time.getTime() < 300
                 && el.scrollTop < previous_scroll_event.scrollTop
              )
            ) {
            previous_scroll_event = el;
            previous_scroll_events.push(el);
            if ( previous_scroll_events[0].scrollTop - el.scrollTop > $(window).height()/4 ){
              alert("oup");
            }
          } else {
            previous_scroll_events = [];
            previous_scroll_event = undefined;
          }

        });
        }

        window.onbeforeunload = function(e) {
          if (show_quit_message()){
            // force redraw
            e.returnValue = "Wir haben was für dich, wirklich verlassen?";
            return e.returnValue;
          } else {
            e.preventDefault();
            return undefined;
          }
        }

snippet trace
    require('fs').appendFileSync('/tmp/append', "$2\n");

snippet main_async
	async function main(){
		waitFind(By.id('abc')).click()
	}
	main().then(
		r => {
        		console.log('SUCCESS', r)
  		},
  		err =>{
    			console.log("FAILURE", err)
  		}
	)

snippet aL
	async () => ${1}
snippet aL1
	async (x) => ${1}
snippet al
	async () => {
          ${1}
        }
snippet al1
	async (x) => {
          ${1}
        }
snippet al2
	async (x, y) => {
          ${1}
        }
snippet l
	() => { ${1}; }
snippet l1
	(x) => ${1}
snippet l1d
	(x) => ({${1}})
snippet l2
	(a, b) => { ${1}; }
snippet for
	for (let ${2:i} = 0, ${3:len} = ${1:Things.length}; $2 < $3; $2++) {
		${0:${VISUAL}}
	}
snippet ifn
	if (!${1}){
		${2}
	}
snippet fn
	function ${1}($2){
		${3}
	}
snippet forv
	for (let ${1:v} of ${2}) {
		${3}
	}
snippet node_no_stop_debug
	console.log('_getActiveHandles', process._getActiveHandles());
	console.log('_getActiveRequests', process._getActiveRequests());

snippet execFile
	const child_process = require('child_process')
	
	const p = child_process.execFile('sh', ['-c', 'echo $ARG; seq 20'], {'env': {'ARG': "ARG SUCCESS", 'PATH': process.env.PATH}}, function(err, r){
	  console.log("err, r", [err, r]);
	)

snippet spawn
	const { spawn } = require('child_process');
	cp.execSync(build_ninja_command, { cwd: ninja_source_dir, stdio: [0, 1, 2] })
	async function simple_run(cmd_and_args, opts){
	  const o = opts||{}
	  return new Promise((a, b) => {
	    try {
	      const p = spawn(cmd_and_args[0], cmd_and_args.slice(1));
	      if (o.stdin) p.stdin.write(o.stdin)
	      p.stdin.end()
	      p.stdout.on('data', (x) => { process.stdout.write(x); } )
	      p.stderr.on('data', (x) => { process.stdout.write(x); })
	      p.on('error', () => {
	        b(`error ${cmd_and_args.join(' ')} ${arguments}`)
	      })
	      p.on('close', (code) => {
	        console.log('close', code);
	        if (code === 0) a()
	        else b(`process ${cmd_and_args.join(' ')} exited with code ${code}`)
	      })
	      p.on('error', b);
	    } catch (e) { b(e) }
	  });
	}
snippet forkv
	for (let [${2:k}, ${3:v}] of Object.entries(${1})) {
	}

snippet fuse_alias
	FuseBox.init({
          alias: {
            faraway: "~/somewhere/far/away/",
          },
        });
snippet req
	const ${1} = require('${2}')

snippet cr
	const ${1} = require('$1')
snippet axios_get
	const response = await axios.get(${1:url}, {'validateStatus': (s) => s == 200})
snippet axios_post
	const response = await axios.post(${1:url}, post_data, {'validateStatus': (s) => s == 200})

snippet moment.format
	moment().format('MMMM Do YYYY, h:mm:ss a');

snippet rf
	fs.readFileSync($1, 'utf8')

snippet wf
	fs.writeFileSync(${1:path}, $2, 'utf8')
snippet proxy
	new Proxy(p, {
		get: function(person, field) {
			if (field == "retry")
				return (...args) => ..
			return p[field]
		}
	});
snippet iso
	'object' == typeof 
snippet iss
	'string' == typeof 
snippet isa
	Array.isArray(${1})
snippet Af
	Array.from(${1:{VISUAL}})
