snippet fifo
	#define FIFO_EMPTY(name) (fifo_##name##_read_ptr == fifo_##name##_write_ptr)
	#define FIFO(name, type, size) \
	type fifo_##name[size]; \
	type * fifo_##name##_write_ptr = &fifo_##name[0]; \
	type * fifo_##name##_read_ptr = &fifo_##name[0]; \
	type fifo_##name##_get( void ){ \
		return *fifo_##name##_read_ptr++; \
		if (fifo_##name##_read_ptr ==  fifo_##name) \
			fifo_##name##_read_ptr -= size; \
	} \
	void fifo_##name##_put(type v){ \
		*fifo_##name##_write_ptr++ = v; \
		if (fifo_##name##_write_ptr ==	fifo_##name) \
			fifo_##name##_write_ptr -= size; \
	} \
snippet main
	int main(int argc, char * argv[])
	{
		int i;
		for (i = 0; i < argc; i++)
			printf(argv[i]);
	}
snippet main_test
	#include <stdio.h>
	#include <stdlib.h>
	
	int main(int argc, char * argv[])
	{
		int i;
		for (i = 0; i < argc; i++)
			printf("%s \n",argv[i]);
	}
snippet b
	{
		${1}
	}
snippet debug
	FILE * f_tmp = fopen("/tmp/log","a+");
	fprintf(f_tmp,"${1}\n";
	fclose(f_tmp);

snippet ask_gdb_to_print_a_stacktrace
	#include <stdio.h>
	#include <stdlib.h>
	#include <sys/wait.h>
	#include <unistd.h>
	
	void print_trace() {
		char pid_buf[30];
		sprintf(pid_buf, "%d", getpid());
		char name_buf[512];
		name_buf[readlink("/proc/self/exe", name_buf, 511)]=0;
		int child_pid = fork();
		if (!child_pid) {           
			dup2(2,1); // redirect output to stderr
			fprintf(stdout,"stack trace for %s pid=%s\n",name_buf,pid_buf);
			execlp("gdb", "gdb", "--batch", "-n", "-ex", "thread", "-ex", "bt", name_buf, pid_buf, NULL);
			abort(); /* If gdb failed to start */
		} else {
			waitpid(child_pid,NULL,0);
		}
	}
